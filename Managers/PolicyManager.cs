using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.SaveSystem;

namespace Populations
{
    public class PolicyManager
    {
        [SaveableProperty(100)]
        public Dictionary<Settlement, List<PolicyElement>> POLICIES { get; set; }

        [SaveableProperty(101)]
        public Dictionary<Settlement, TaxType> TAXES { get; set; }

        [SaveableProperty(102)]
        public Dictionary<Settlement, MilitiaPolicy> MILITIAS { get; set; }

        [SaveableProperty(103)]
        public Dictionary<Settlement, WorkforcePolicy> WORKFORCE { get; set; }

        [SaveableProperty(104)]
        public Dictionary<Settlement, TaxType> TARIFFS { get; set; }

        public PolicyManager(Dictionary<Settlement, List<PolicyElement>> POLICIES, Dictionary<Settlement, TaxType> TAXES, 
            Dictionary<Settlement, MilitiaPolicy> MILITIAS, Dictionary<Settlement, WorkforcePolicy> WORKFORCE, Dictionary<Settlement, TaxType> TARIFFS)
        {
            this.POLICIES = POLICIES;
            this.TAXES = TAXES;
            this.MILITIAS = MILITIAS;
            this.WORKFORCE = WORKFORCE;
            this.TARIFFS = TARIFFS;
        }

        public bool IsSettlementPoliciesSet(Settlement settlement) => POLICIES.ContainsKey(settlement);
        public List<PolicyElement> GetDefaultDecisions(Settlement settlement)
        {
            if (!POLICIES.ContainsKey(settlement))
                InitializeSettlementPolicies(settlement);

            return POLICIES[settlement];
        }

        public static void InitializeSettlementPolicies(Settlement settlement)
        {
            if (!PopulationConfig.Instance.PolicyManager.POLICIES.ContainsKey(settlement))
            {
                List<PolicyElement> policies = new List<PolicyElement>();
                if (settlement.IsTown)
                {
                    policies.Add(new PolicyElement("Allow slaves to be exported", "Slave caravans will be formed when slave population is big", true, PolicyType.EXPORT_SLAVES));
                    policies.Add(new PolicyElement("Accelerate population growth", "Use your influence to provide better housing and allow more population growth", false, PolicyType.POP_GROWTH));
                    policies.Add(new PolicyElement("Allow settlement to self-invest", "Income generated by the settlement will be reverted back into it's economic development", false, PolicyType.SELF_INVEST));
                    policies.Add(new PolicyElement("Conscript the lowmen", "Extensive recruitment will draft serfs into the militia, costing gold and reducing the productive workforce", false, PolicyType.CONSCRIPTION));
                    policies.Add(new PolicyElement("Subsidize the militia", "Improve militia quality by subsidizing their equipment and trainning", false, PolicyType.SUBSIDIZE_MILITIA));
                    policies.Add(new PolicyElement("Exempt nobles from taxes", "Exempt nobles from taxes, making them vouch in your favor", false, PolicyType.EXEMPTION));
                }
                else if (settlement.IsVillage)
                {
                    policies.Add(new PolicyElement("Accelerate population growth", "Population will grow faster at the cost of influence", false, PolicyType.POP_GROWTH));
                    policies.Add(new PolicyElement("Allow settlement to self-invest", "Income generated by the settlement will be reverted back into it's growth", false, PolicyType.SELF_INVEST));
                    policies.Add(new PolicyElement("Subsidize the militia", "Improve militia quality by subsidizing their equipment and trainning", false, PolicyType.SUBSIDIZE_MILITIA));
                }
                else
                {
                    policies.Add(new PolicyElement("Allow slaves to be exported", "Slave caravans will be formed when slave population is big", true, PolicyType.EXPORT_SLAVES));
                    policies.Add(new PolicyElement("Accelerate population growth", "Use your influence to provide better housing and allow more population growth", false, PolicyType.POP_GROWTH));
                    policies.Add(new PolicyElement("Allow settlement to self-invest", "Income generated by the settlement will be reverted back into it's economic development", false, PolicyType.SELF_INVEST));
                    policies.Add(new PolicyElement("Conscript the lowmen", "Extensive recruitment will draft serfs into the militia, costing gold and reducing the productive workforce", false, PolicyType.CONSCRIPTION));
                    policies.Add(new PolicyElement("Subsidize the militia", "Improve militia quality by subsidizing their equipment and trainning", false, PolicyType.SUBSIDIZE_MILITIA));
                    policies.Add(new PolicyElement("Exempt nobles from taxes", "Exempt nobles from taxes, making them vouch in your favor", false, PolicyType.EXEMPTION));
                }

                PopulationConfig.Instance.PolicyManager.POLICIES.Add(settlement, policies);
            }  
        }

        public string GetTaxHint(TaxType policy, bool isVillage)
        {

            if (policy == TaxType.High)
            {
                if (isVillage) return "Yield more tax from the population, but reduce growth";
                else return "Yield more tax from the population, at the cost of decreased loyalty";
            }
            else if (policy == TaxType.Low)
            {
                if (isVillage) return "Reduce tax burden on the population, diminishing your profit but increasing their support towards you";
                else return "Reduce tax burden on the population, encouraging new settlers";
            }
            else if (policy == TaxType.Exemption)
                return "Fully exempt notables from taxes, improving their attitude towards you";
            else return "Standard tax of the land, with no particular repercussions";
        }

        private PolicyElement GetPolicyElementFromType(PolicyType type)
        {
            if (type == PolicyType.EXPORT_SLAVES)
                return new PolicyElement("Allow slaves to be exported", "Slave caravans will be formed when slave population is big", true, PolicyType.EXPORT_SLAVES);
            else if (type == PolicyType.POP_GROWTH)
                return new PolicyElement("Accelerate population growth", "Population will grow faster at the cost of influence", false, PolicyType.POP_GROWTH);
            else return null;
        }

        public MilitiaPolicy GetMilitiaPolicy(Settlement settlement)
        {
            if (MILITIAS.ContainsKey(settlement))
                return MILITIAS[settlement];
            else
            {
                MILITIAS.Add(settlement, MilitiaPolicy.Balanced);
                return MilitiaPolicy.Balanced;
            }
        }

        public void UpdateMilitiaPolicy(Settlement settlement, MilitiaPolicy policy)
        {
            if (MILITIAS.ContainsKey(settlement))
                MILITIAS[settlement] = policy;
            else MILITIAS.Add(settlement, policy);
        }

        public void UpdateTaxPolicy(Settlement settlement, TaxType policy)
        {
            if (TAXES.ContainsKey(settlement))
                TAXES[settlement] = policy;
            else TAXES.Add(settlement, policy);
        }

        public TaxType GetSettlementTax(Settlement settlement)
        {
            if (TAXES.ContainsKey(settlement))
                return TAXES[settlement];
            else
            {
                TAXES.Add(settlement, TaxType.Standard);
                return TaxType.Standard;
            }
        }

        public void UpdateTariffPolicy(Settlement settlement, TaxType policy)
        {
            if (TARIFFS.ContainsKey(settlement))
                TARIFFS[settlement] = policy;
            else TARIFFS.Add(settlement, policy);
        }

        public TaxType GetSettlementTariff(Settlement settlement)
        {
            if (TARIFFS == null) TARIFFS = new Dictionary<Settlement, TaxType>();
            if (TARIFFS.ContainsKey(settlement))
                return TARIFFS[settlement];
            else
            {
                TARIFFS.Add(settlement, TaxType.Standard);
                return TaxType.Standard;
            }
        }


        public WorkforcePolicy GetSettlementWork(Settlement settlement)
        {
            if (WORKFORCE.ContainsKey(settlement))
                return WORKFORCE[settlement];
            else
            {
                WORKFORCE.Add(settlement, WorkforcePolicy.None);
                return WorkforcePolicy.None;
            }
        }

        public bool IsPolicyEnacted(Settlement settlement, PolicyType policy)
        {
            PolicyElement element = null;
            if (POLICIES.ContainsKey(settlement))
                element = POLICIES[settlement].Find(x => x.type == policy);
            return element != null ? element.isChecked : false;
        }

        public void UpdatePolicy(Settlement settlement, PolicyType policy, bool value)
        {
            PolicyElement element = POLICIES[settlement].Find(x => x.type == policy);
            if (element != null) element.isChecked = value;  
            else
            {
                PolicyElement elementToAdd = GetPolicyElementFromType(policy);
                if (elementToAdd != null)
                {
                    elementToAdd.isChecked = value;
                    POLICIES[settlement].Add(elementToAdd);
                }
            }
        }

        public void UpdateWorkPolicy(Settlement settlement, WorkforcePolicy policy)
        {
            if (WORKFORCE.ContainsKey(settlement))
                WORKFORCE[settlement] = policy;
            else WORKFORCE.Add(settlement, policy);
        }

        public class PolicyElement
        {
            [SaveableProperty(1)]
            public string description { get; set; }

            [SaveableProperty(2)]
            public string hint { get; set; }

            [SaveableProperty(3)]
            public bool isChecked { get; set; }

            [SaveableProperty(4)]
            public PolicyType type { get; set; }

            public PolicyElement(string description, string hint, bool isChecked, PolicyType type)
            {
                this.description = description;
                this.hint = hint;
                this.isChecked = isChecked;
                this.type = type;
            }
        }

        public enum WorkforcePolicy
        {
            None,
            Land_Expansion,
            Martial_Law,
            Construction
        }

        public enum MilitiaPolicy
        {
            Balanced,
            Melee,
            Ranged
        }

        public enum PolicyType
        {
            EXPORT_SLAVES,
            POP_GROWTH,
            SELF_INVEST,
            CONSCRIPTION,
            EXEMPTION,
            SUBSIDIZE_MILITIA
        }

        public enum TaxType
        {
            High,
            Standard,
            Low,
            Exemption
        }
    }
}
